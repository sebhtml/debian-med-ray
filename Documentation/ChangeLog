This file is not updated anymore.

To generate a ChangeLog file:

	./scripts/dump-ChangeLog.sh > ChangeLog
	less ChangeLog


= 1.6.2 'raygun' =
2011-09-XX

* Ray can now detect more than 1 peak in the same paired library. This is useful because
paired reads generated using DNA circularization will often be contaminated by some from 
not circularized DNA (shorter outer distance).
* File partitioning is now performed in parallel.
* New option: -show-extension-choice shows possible choices when the path is branching in the
graph.
* New experimental assembly choice engine: Ray NovaEngine. NovaEngine makes better choices for
mate-pair reads.
* Simplified the algorithm that finds a peak in the coverage distribution and added 35 unit
tests to test it.
* Moved Kmer logic in class Kmer. suggested by David Eccles
(gringer) from Max-Planck-Gesellschaft, München.
* Added information on unknown nucleotides in the instruction manual.
Suggested by Walter Eckalbar from Arizona State University.
* New output files: PREFIX.SequencePartition.txt and
PREFIX.NumberOfSequences.txt.
* New options: -write-seeds and -write-extensions, these write seeds and
extensions to disk in FASTA format
* Fixed a bug in the incremental resizing algorithm of MyHashTable.
* Added debugging option -show-distance-summary
* Removed the coverage threshold from the algorithm that finds seeds in the distributed graph.
Suggested by David Eccles(gringer) from Max-Planck-Gesellschaft, München.
* Added N50, median, average and largest contig and scaffold lengths in PREFIX.OutputNumbers.txt
* Implemented a Bloom filter to reduce the memory usage. This is ridiculously good and 
the false positive rate has no effect whatsoever on Ray thanks to the KmerAcademy.
* Fixed a memory problem in the computation of optimal read markers.
* The paired read simulator is now a separate project, see https://github.com/sebhtml/paired-read-simulator
* Extension of seeds if done endlessly until growth stops.
* Input opcodes are now shuffled before being utilised.
* Added option -write-checkpoints for checkpointing.
* Added option -read-checkpoints to read checkpoints.
* Added option -read-write-checkpoints to use checkpoints in general.
* Added option -test-network-only to only to test the network and return.


= 1.6.1 'sunray' =
2011-07-14

* Presumably fixed a compilation error on Apple Snow Leopard.
Thanks to Anthony Underwood for reporting the bug.
* Added a smoothing routine for the detection of points in the coverage
distribution. Thanks to pmiguel on SEQanswers for providing raw data points.
* Changed ifdef linux to ifdef __linux__.
* Fixed the showMemoryUsage function.
* Fixed uniform distribution of k-mers for k > 32 -- there was a bug in
an hashing function. Thanks to Adrian Platts (McGill University) for reporting this.
* Fixed a bug for the seed length distribution written to a file.
* Changed MAXKMERLENGTH=128 for MAXKMERLENGTH=64 in examples. 
Thanks to Adrian Platts (McGill University) for reporting this.
* Fixed a communication problem for k>32.
* Added a progression indicator for scaffolding.
* Writting scaffold sequences is now faster.
* New option: -write-kmers writes k-mers, their counts and the arcs linking them.
* New experimental option: -color-space for .csfasta files.
Ray can generated color-space contigs but the feature is mostly untested.
* Added an assembler panic when no k-mers are found in reads.
* New options: -minimumCoverage, -peakCoverage, -repeatCoverage -- provides
coverage values manually. Otherwise these are automatically selected
as usual.
* Reduced the memory usage during the building of the graph using a k-mer academy.
Once the graph is ready, memory for k-mers occuring once is freed.
* New outputted file: PREFIX.degreeDistribution.txt contains the distribution
of degrees in the graph. Most vertices should have an ingoing degree of 1 and an
outgoing degree of 1.
*  Cleaned the code by removing MemoryConsumptionReducer.
* The hash tables are now implemented using open addressing with double
hashing (from The Art of Computer Programming by Donald Knuth)
* Implemented a sparse hash map (following the description of Google sparse
hash; see structures/MyHashTable.h)
* New output file: PREFIX.MessagePassingInterface.txt contains the number of
sent messages for each type during an assembly run.
* System tests are now in system-tests
* Implemented SmartPointer objects to allow defragmentation of memory.
* Implemented real-time defragmentation for SmartPointer objects.
* Implemented incremental resizing to allow low latency when an hash table needs
to grow.
* Fixed a buffer overflow in getKmerAtPosition, reported by David Eccles
(gringer) from Max-Planck-Gesellschaft, München.
* Added a new output file called PREFIX.NetworkTest.txt which contains the average
latency including software overhead.
* Fixed some compilation warning on 32-bit GNU/Linux.
* Tested Ray on the Intel Atom processor.

= 1.6.0 =
2011-06-13

* Moved the code tree to subversion to git and from an in-house tree to a
github tree -- see http://github.com/sebhtml/ray
* Fixed a compilation problem in Scaffolder.cpp. Thanks to
Volker Winkelmann (University of Cologne).
* Changed CC to MPICXX and added lines to compile Ray with Intel's MPI
implementation. Thanks to Volker Winkelmann (University of Cologne).
* Implemented a Kmer class for arbitrary long k-mers (MAXKMERLENGTH)
* Added pack and unpack methods to Kmer to abstract the communication of
k-mers -- thanks to Élénie Godzaridis for the idea.
* Output contigs >= 100, not paths >= 100
* Detailed the warning for unmatched 454 prefix.
* Fixed a bug in the TLE entries in the AMOS file.
* The Makefile can now install Ray somewhere. (make PREFIX=prefix; make
install)
* Structures are now packed by default. Set FORCE_PACKING=n to disable it.
* Created subdirectories for code.
* Ray now uses all sequences in an SFF file -- not just those matching the
sequence key.
* Ray now estimates the genome length in
RayOutput.CoverageDistributionAnalysis.txt.
* Fixed an integer overflow in CoverageDistribution when the number of k-mers
occuring once is very large (for Assemblathon-2 datasets).
* Added exit code EXIT_NO_MORE_MEMORY=42 as suggested by Hannes Pouseele (applied-maths.com).
* Fixed the an access violation on Windows. Bug reported by Hannes Pouseele (applied-maths.com).
* Fixed compilation errors for Microsoft Visual C++ (xiosbase and stdexcept) 
Bug reported by Hannes Pouseele (applied-maths.com>)
* Ray compiles with Microsoft Visual Studio 10.0 without any change.


= 1.4.0 =
2011-05-30

* A built-in scaffolder is now available -- Thanks to Dr. Jean-Francois
Pombert (University of British Columbia) for the suggestion.
* The maximum number of libraries is now 499 instead of 250.
* The number of seeds is now divided by 2 to speed up their extension.
* Fixed a bug in the depth first search that leaded to vertices having no
coverage values.
* Removed the configure script, now Ray must be compiled with the provided Makefile.
* Added a switch to enable the profiler: -run-profiler
* Added a switch to debug seed generation: -debug-seeds
* Added a switch to debug bubble detection: -debug-bubbles
* Added a switch to show memory usage: -show-memory-usage
* Added a switch to show the ending context of extensions:
-show-ending-context
* Devised a new algorithm that finds the peak coverage, minimum coverage and
repeat coverage in distributions.
* Ray now writes the peak, minimum and repeat coverages to a file.
* Ray now writes the statistics for libraries to a file.
* Fixed a bug that disallowed mixing manual and automatic detection of outer distances.
* Ray now writes the statistics for seed lengths to a file.
* Devised a new algorithm that computes longer seeds to bootstrap assemblies.
* Slave modes, master modes and MPI tags are generated with macros for method
prototypes, enumerations and assignments in arrays.
* Added some changes for Microsoft Windows compatibility. Thanks to Hannes
Pouseele (Applied Maths, Inc.) for some suggestions.
* Added instructions regarding mpic++ and CXX environment variable.
Thanks to Dr. Harry Mangalam from UC Irvice for pointing that out.
* Changed the merger behavior for ends of contigs.
* Added a script to validate scaffolds.


= 1.3.0 =
2011-03-22

* Vertices with less than 1 of coverage are ignored during the computation of
seeds and during the computation of extensions.
* Computation of library outer distances relies on the virtual communicator.
* Expiry positions are used to toss away reads that are out-of-range
* When only one choice is given during the extension and some reads are
in-range, then the sole choice is picked up.
* Fixed a bug for empty reads.
* A read is not added in the active set if it is marked on a repeated vertex
and its mate was not encountered yet.
* Grouped messages in the extension of seeds.
* Reads marked on repeated vertices are cached during the extension.
* Paths are cached in the computation of fusions.
* Fixed an infinite loop in the extension of seeds.
* When fetching read markers for a vertex, send a list of mates to meet if the
vertex is repeated in order to reduce the communication.
* Updated the Instruction Manual
* Added a version of the logo without text.


= 1.2.4 =
2011-02-23

* Reduced the memory fragmentation in the extension of seeds.
* Implemented a large grid table. It is an hash table in with elements in bins
are ordered by the number of accesses.
* The memory for sequence reads is reused in the extension of seeds.
* Any vertex is stored along its reverse complement.
* The Vertex class was stripped to reduce the memory usage.
* The vertex data is now stored in a separate place to reduce memory usage.
* Removed the call to __Realloc
* Don't index reads on vertices with a coverage of 1.
* Structures can be packed by providing -DFORCE_PACKING at compile time, this
will save memory. Might not be suitable for some architectures.
* Fixed 'Ray: code/MessageProcessor.cpp:1317: void
MessageProcessor::call_RAY_MPI_TAG_GET_PATH_LENGTH(Message*): Assertion
`m_fusionData->m_FUSION_identifier_map.count(id)>0' failed.' This occured when
vertices of a path are involved with fusions, but the associated path was not
stored owing too its length that was too short.
* Grouped messages for read indexing.
* The maximum coverage allowed is not 65535 instead of 255.
* Sequencing indexing in the de Bruijn graph places each read on a 'good'
vertex.
* Included algorithm for repeats traversal using large outer distance


= 1.2.3 'cRAYfish' =
2011-02-05

* Instruction manual
* Fixed a bug leading to a segmentation fault when providing an invalid file
or no file at all. This bug was introduced in Ray 1.2.2.
* Fixed a bug leading to a hang when providing invalid arguments.
* Added reporting of memory usage after loading sequences and after
distributing vertices.
* Removed read simulators because samtools include one called 'wgsim'.
* Changed the paired-end heuristics to accomodate larger distances.
* Removed RepeatedVertexWatchdog.
* Changed the RepeatedThreshold from 255 to 2*peakCoverage (or 255 if it is
higher than 255)
* Now both versions of read pairs are utilized.
* Paired reads are utilized if the distance falls in mean-3 standard
deviation;mean+3 standard deviation. (3 instead of 1 as described in the
paper).
* If a pair of reads does not respect the constraints, the right read is 
removed from the used read set.
* Fusions are computed more cautiously.
* Added reporting of memory usage for sequence reads and for vertices. And for
a few other places too.
* Improved memory usage for the extensions. Now calling destructors instead of
clear() because the latter does not free memory.
* Messages are grouped in the computation of seeds, using VirtualCommunicator.
* Added a Doxygen configuration file.
* The paths in the distributed graph are now numbered with an integer of 64
bits. This fixes a segmentation fault occuring with large genomes -- when
identifiers overflow on 32 bits. (need to verify this)
* The partition on sequence reads is outputted.
* Instead of having the Rank 0 (master) to request the contigs of each every
other rank, now each rank appends its fusions to the contigs file and also to
the AMOS file.
* Fixed a bug in the numbering of reads in the AMOS file.
* Fixed a memory usage problem in the memory consumption reducer
* Improved the running time for the extension of seeds by removing an inner
loop.


= 1.2.2 'X-ray' =
2011-01-11

* The number of messages in the inbox of any MPI rank is always 0 or 1.
* The number of messages in the outbox of any MPI rank is always lower than or
equal to max(17,number of MPI ranks).
* Fixed a ring buffer overflow when requesting the reads starting on a
highly-repetitive vertex.
* Implemented a chunk allocator for the arrays of sequencing reads locally
stored on compute nodes.
* Parallel reading of sequence files.
* Some improvements on the experimental memory consumption reducer.
* Sequence reads are now encoded: each nucleotide is stored with 2 bits
instead of 8 bits.
* Fixed bugs when there are more than 4294967296 (2^32) sequence reads in
total, the maximum now is 18446744073709551616 (2^64).


= 1.2.1 'stringray' =
2010-12-30

* SplayTreeIterator now iterates in preorder instead of inorder.
* Now the SplayTreeIterator is utilized to iterate over the vertices instead of
storing them in an array (takes too much memory).
* The forest of splay trees now contains 16384 trees instead of 4096. Note
that as usual, each MPI rank has its own forest. Furthermore, the forest freezes when vertices distribution is properly
finished -- which means no more splaying in the splay trees is to occur. The process
ensures that vertices with low redundancy remain at leaves.
* Bubble traversal ensures no misassemblies as
polymorphic positions (substitution, and indels) are assembled !!!
* Works with 454 data too (454 homopolymers error are interpreted as
polymorphic positions).
* Added numeric indicator for files. (example: [1/9])
* Corrected a bug in library lengths messaging that leaded to hanging and/or
Bus Error.
* Fixed a segmentation fault when the -a (output AMOS) is provided. Thanks to
Daniel Brami from J. Craig Venter Institute (La Jolla, CA) for the timely
report.
* Preliminary version of an algorithm to preemptively reduce the memory usage
while building the distributed graph.
* Under GNU/Linux platforms, Ray outputs the virtual memory (VmData from
/proc, that is the heap) utilized before exiting.


= 1.2.0 =
2010-12-03

* Implemented lazy loading of files (sequences in any files are loaded in
small batches instead of loading the whole file.)
* Added an error message for an invalid extension. Thanks to Jean-Francois
Pombert (University of British Columbia) for the feature request.
* Removed comparison scripts -- if you want them, download a previous version.
* Fixed configure script.
* Added ArrayOfReads, a dynamic array that free its memory on clearing. (unline vector in stl, apparently.)
* Fixed a division by zero. (in BufferedData.cpp)
* Reduced the computation time of 'Finishing fusions' from 5+ hours to 3 minutes or so for 
the chromosome 1 of the human genome, simulated with two libraries: 200 & 400. In v. 1.0.0, many messages were unecessary for this
step in the algorithm.
* Now the approximation of fragment lengths for libraries is deterministic, no matter the order of the files
and the number of MPI ranks.
* Added two useful scripts to check resources on supercomputers with Sun Grid Engine: qhost.py and add-color-to-qhost.py.
-> qhost.py 1072283|add-color-to-qhost.py > Ray.html
* Added makefile.alternate to compile Ray if the configure script fails.
'make -f makefile.alternate'
* Added an fflush call after calls to printf to have a beautiful output in stdout with MPICH2.
* Removed DistributionData.
* PairedRead now contains m_readIndex (u32), m_rank (u16) and m_library (u8)
instead of m_readIndex (u32), m_rank (u16), m_fragmentSize (u16) and
m_deviation (u16). That means storing one paired read needs 7 bytes instead of
10 bytes. Library information are stored in Parameters.
* 'make install' also installs documentation and examples now.
* Moved finishFusion & makeFusion in FusionData.cpp
* Moved seed creation in SeedingData.cpp
* Now print-latex.sh, the script that calculates metrics for an assembly, uses
only MUMmer and AMOS commands (no more BLAST).

= 1.0.0 =
2010-11-25

* Made a lots of changes to make Ray compliant with the standard MPI 2.2
* Added master and slave modes.
* Added an array of master methods (pointers): selecting the master method
with the master mode is done in O(1).
* Added an array of slave methods (pointers): selecting the slave method
with the master mode is done in O(1).
* Added an array of message handlers (pointers): selecting the message handler method
with the message tag is done in O(1).
* Replaced MPI_Send by MPI_Isend. Thanks to Open-MPI developpers for their
support and explanation on the eagerness of Open-MPI: George Bosilca (University of Tennessee), Jeff Squyres (Cisco), Eugene Loh (Oracle)
* Moved some code for the extension of seeds.
* Grouped messages for library updates.
* Added support for paired-end interleaved sequencing reads (-i option)
Thanks to Dr. Torsten Seemann (Victorian Bioinformatics Consortium, Dept.
Microbiology, Monash University, AUSTRALIA) for suggesting the feature !
* Moved detectDistances & updateDistances in their own C++ file.
* Updated the Wiki.
* Decided that the next release was 1.0.0.
* Added support for .fasta.gz and .fastq.gz files, using libz (GZIP).
Thanks to Dr. Torsten Seemann (Victorian Bioinformatics Consortium,
Dept. Microbiology, Monash University, AUSTRALIA) for suggesting the feature !
* Tested with k=17: it uses less memory, but is less precise.
* Fixed a memory allocation bug when the code runs on 512 cores and more.
* Added configure script using automake & autoconf.
Note that if that fails, read the INSTALL file !
* Moved the code that loads fasta files in FastaLoader.
* Moved the code that loads fastq files in FastqLoader.
* Regulated the communication in the MPI 'tribe'.
* Added an assertion to verify the message buffer length before sending it.
* Modified bits so that if a message is more than 4096 bytes, split it in
chunks.
* Used a sentinel to remove two messages, coupled with TAG_REQUEST_READS.
* Stress-tested with MPICH2.
* Implemented a ring allocator for inboxes and outboxes.
* Changed flushing so that all use <flush> & <flushAll> in BufferedData.
* Changed the maximum message size from 4096 to 4000 to send messages eagerly
more often (if it happens). Thanks to Open-MPI developpers for their
support and explanation on the eagerness of Open-MPI: Eugene Loh (Oracle), George Bosilca
(University of Tennessee), Jeff Squyres (Cisco).
* Changed the way sequencing reads are indexed: before the master was
reloading (again !) files to do so, now no files are loaded and every MPI ranks
participate in the task.
* Modified the way sequences are distributed. These are now appended to fill the buffer, and
the sentinel called 'End of transmission' is used. Thanks to
Élénie Godzaridis for pointing out that '\0' is not a valid sentinel for
strings !
* Optimized the flushing in BufferedData: flush is now destination-specific.
O(1) instead of O(n) where n is the number of MPI ranks.
* Optimized the extension: paired information is appended in the buffer in
which the sequence itself is.
* Added support for .fasta.bz2 & .fastq.bz2. This needs LIBBZ2 (-lbz2)
* Added instructions in the INSTALL file for manually compiling the source in
case the configure script gets tricky (cat INSTALL).
* Added a received messages file. This is pretty useless unless you want to
see if the received messages are uniform !.
* Added bits to write the fragment length distribution of each library.
* Changed the definition of MPI tags: they are now defined with a enum.
Thanks to Élénie Godzaridis for the suggestion.
* Changed the definition of slave modes: they are now defined with a enum.
Thanks to Élénie Godzaridis for the suggestion.
* Changed the definition of master modes: they are now defined with a enum.
Thanks to Élénie Godzaridis for the suggestion.
* Optimized finishFusions: complexity changed from O(N*M) to O(N log M).
* Designed a beautiful logo with Inkscape.
* Added a script for regression tests. 
* Changed bits so that a paired read is not updated if it does not need it
* Changed the meaning of the -o parameter: it is now a prefix.
* Added examples with MPICH2, Open-MPI, and Open-MPI/SunGridEngine.
* Changed DEBUG for ASSERT as it activates assertions.
* Updated the citation in the standard output.
* Corrected the interleave-fastq python script.
* Changed the license file from LICENSE to COPYING.
* Removed the trimming of reads if they are not read from a file.
* Increased the verbosity of the extension step.
* Added gnuplot scripts.
* Changed the file name for changes: from NEWS to ChangeLog.
* Optimized the MPI layer: replaced MPI_Iprobe by MPI_Recv_init+MPI_Start.
see MessagesHandler.cpp !
(Thanks to George Bosilca (University of Tennessee) for the suggestion !
* Compiled and tested on architecture SPARC V9 (sparc64).
Thanks to René Paradis for handing me the hardware.
* Compiled and tested on architecture Intel Itanium (ia64).
* Compiled and tested on architecture Intel64 (x86_64).
* Compiled and tested on architecture AMD64 (x86_64).
* Compiled and tested on Intel architecture (x86/ia32).
* Evaluated regression tests.


= 0.1.0 =
2010-11-03

* Moved some code from Machine.cpp to new files. (Ticket #116)
* Improved the speed of the extension of seeds by reducing the number of messages sent. (Tickets #164 & #490)
Thanks to all the people who reported this on the list !
* Ray is now verbose ! (Ticket #167)
Feature requested by Dr. Torsten Seemann (Victorian Bioinformatics Consortium, Dept. Microbiology, Monash
University, AUSTRALIA)
* The k-mer size can now be changed. Minimum value is 15 & maximum value is 32. (Tickets #169 & #483)
Feature requested by Dr. Torsten Seemann (Victorian Bioinformatics Consortium, Dept. Microbiology, Monash
University, AUSTRALIA)
* Ray should work now on architectures requiring alignments of address on 8 bytes such as Itanium. (Ticket #446)
Bug reported by Jordi Camps Puchades (Centre Nacional d'Anàlisi Genòmica/CNAG)
* Added reference to the paper in stdout. (Ticket #479)
* The coverage distribution is now always written. (Ticket #480)
* The code for extracting edges is now in a separate file (Ticket #486)
* Messages for paired reads are now grouped with messages for querying sequences in the extension of seeds. (Tickets #487 & #495)
* Messages for sequence reads are now done only once, when the read is initially discovered. (Ticket #488)
* Messages with tag TAG_HAS_PAIRED_READ are grouped with messages to get sequence reads. (Ticket #491)
* Added TimePrinter to print the elapsed time at each step. (Ticket #494)
* All generated files (AMOS, Contigs, and coverage distribution) are named following the -o parameter. (Ticket #426)
Feature requested by Jordi Camps Puchades (Centre Nacional d'Anàlisi Genòmica/CNAG)
* Print an exception if requested memory exceeds CHUNK_SIZE. That should never happen. (r3690)
* Print an exception if the system runs out of memory.
* Ray informs you on the number of k-mers for a k-mer size. (r3691)
* Unique IDs of sequence reads are now unsigned 64-bits integers. (r3710)
* The code is now in code/, scripts are now in scripts/. Examples are in scripts/examples/. (r3712)
* The compilation is more verbose. (r3714)


=  0.0.7 =
2010-04-24 

* (Small) speed improvement in seed extension (trac #21)
* Ray can now write to user-specified files -- Huge thanks to Matthew
MacManes (University of California -- Berkeley) for suggesting this (trac #163)
* Changed the allocator size to 0x1000000 (trac #162)
* Ray can now estimate paired distances -- thanks to Torsten
Seemann (Victorian Bioinformatics Consortium, Dept. Microbiology, Monash
University, AUSTRALIA) for his expertise (trac #159 158 #156 #131)
* Each MPI process now has a forest of 0x1000 splay trees, which are frozen
(no more splay operations) after no more items are inserted. (trac #151 #150
#149)
* Added running times in comparisons, as wisely suggested by Matthew MacManes
(University of California -- Berkeley) (trac #136)
* Ray is now better with a large peak coverage, and is more careful
otherwise. (trac #135 #134)
* Some improvements on mix datasets (trac #132)
* Ray is now robust when parsing arguments, and will complaint if something
is messy -- thanks to Torsten Seemann (Victorian Bioinformatics Consortium, Dept. Microbiology, Monash 
University, AUSTRALIA) for noticing the issue (trac #129)


= 0.0.6 =
2010-04-10

* 'make test' now performs unit tests (trac #83)
* 'make simtools' compiles simulation tools (trac #43)
* ignore coverage at 255 or more in the coverage distribution (trac #105)
* reduced number of contigs and error rates (trac #103 #106 #107 #110 #111
#118)
* MPI messages are grouped together in up-to-4096-bytes messages, when
possible (trac #114)
* unroll some loops to gain performance (trac #117)
* scripts included to do benchmarks
* improved AMOS file generation
* corrected the loader for color-space reads (thanks to sparks from
seqanswers.com)
* some code refactoring to reduce the size of Machine.cpp
* Comparison with other assemblers 


= 0.0.5 =
2010-03-29 

* Ray now outputs assemblies in AMOS format (with -a), (trac #58)
* Ray commands can be provided with a commands file (like in 0.0.3 and 0.0.4)
as well as with command-line arguments, (trac #94) and
* Ray removes non-A-T-C-G letters at both ends of reads.


= 0.0.4 =
2010-03-22

* Fixed many bugs in Ray when k is lower than 25 (when k=21, in particular)
(trac #88)
* Fixed segmentation fault when loading helicos data (trac #86)
* Made some changes after analyzing how the word length is impacting the
assembly of the public dataset SRA001125 (trac #81)
* Modified the Parallel_Ray_Engine (now version 0.0.4) to handle mixed
datasets (tested on the public dataset SRA003611) (trac #79)
* Implemented a dead-end detector for unpaired short reads (trac #20)
* Fixed segmentation fault when no input is provided (trac #82)
* Changed Ray's default behavior when no peak is observed in the coverage
(trac #80)
* Added public dataset links on the web page (trac #77)
* Fixed a serious flaw in Parallel_Ray_Engine that led to segmentation faults
(trac #76) (this flaw was kindly reported by Dr Torsten Seemann @  Victorian
Bioinformatics Consortium -- thank you!)
* Changed the behavior of memory allocators in message passing --
Ray now reuses allocated memory for ingoing and outgoing messages
(10 MB for each).
* Added a mummer validation script (r3090)


= 0.0.3 =
2010-03-09

* initial release


= 0.0.2 =
2010-02-19 

* nothing noteworthy to report


= 0.0.1 =
2010-02-10

* codenamed Osiris


= 0.0.0 =
2010-01-29 

* codenamed crocodile
